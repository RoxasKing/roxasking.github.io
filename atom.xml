<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://roxasking.github.io</id>
    <title>RoxasKing&apos;s Blog</title>
    <updated>2021-07-08T11:01:49.815Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://roxasking.github.io"/>
    <link rel="self" href="https://roxasking.github.io/atom.xml"/>
    <logo>https://roxasking.github.io/images/avatar.png</logo>
    <icon>https://roxasking.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, RoxasKing&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[用写代码的方式，给技术文章配图！DOT语言入门指引(二)]]></title>
        <id>https://roxasking.github.io/post/yong-xie-dai-ma-de-fang-shi-gei-ji-zhu-wen-zhang-pei-tu-dot-yu-yan-xue-xi-zhi-nan_2/</id>
        <link href="https://roxasking.github.io/post/yong-xie-dai-ma-de-fang-shi-gei-ji-zhu-wen-zhang-pei-tu-dot-yu-yan-xue-xi-zhi-nan_2/">
        </link>
        <updated>2021-07-08T11:15:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="常用属性声明">&gt;&gt;&gt; 常用属性声明</h2>
<p>所有属性声明皆为 键值对，即 name=value 形式，value值为字符串，大部分情况下不加双引号也能生效，但个人建议还是加上，因为加上后在编辑器里区别很明显</p>
<pre><code class="language-dot">strict digraph {
	Hello [color = &quot;green&quot;] // 为节点声明
	world [color = orange]
	Hello -&gt; world [color= &quot;red&quot;] // 为边声明
	world -&gt; Hello [arrowhead = &quot;diamond&quot;]
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://roxasking.github.io/post-images/1625641093218.png" alt="" loading="lazy"></figure>
<hr>
<h2 id="全局属性">&gt;&gt; 全局属性</h2>
<p>可以为 node、edge、bgcolor等 设置全局属性，全局属性在subgraph和cluster里也会生效<br>
<img src="https://roxasking.github.io/post-images/1625640664290.png" alt="" loading="lazy"><br>
全局属性可以被自定义属性覆盖，示例如下<br>
<img src="https://roxasking.github.io/post-images/1625640671077.png" alt="" loading="lazy"></p>
<hr>
<h3 id="排列方向-rankdir">&gt;&gt; 排列方向 <strong>rankdir</strong></h3>
<p>默认为从上到下，即 <strong>TB</strong>，你还可以指定为 <strong>LR</strong>(从左到右)，<strong>BT</strong>(从下到上)，<strong>RL</strong>(从右到左)<br>
<img src="https://roxasking.github.io/post-images/1625742091081.png" alt="" loading="lazy"></p>
<hr>
<h3 id="配色方案-colorscheme">&gt;&gt; 配色方案 <strong>colorscheme</strong></h3>
<p>此属性用来指定配色方案的命名空间，通过使用命名空间里的颜色名便可指定颜色，默认命名空间为 <strong>X11</strong>，而所有可指定的命名空间，以及命名空间下的颜色名，参考 <a href="https://graphviz.org/doc/info/colors.html">官方文档</a><br>
<img src="https://roxasking.github.io/post-images/1625644658443.png" alt="" loading="lazy"></p>
<hr>
<h3 id="背景色-bgcolor">&gt;&gt; 背景色 <strong>bgcolor</strong></h3>
<p>可以直接指定颜色名<br>
<img src="https://roxasking.github.io/post-images/1624358967912.png" alt="" loading="lazy"><br>
也可以使用RGB颜色代码的方式，比如HEX格式<br>
<img src="https://roxasking.github.io/post-images/1624359195015.png" alt="" loading="lazy"><br>
或者HSV格式<br>
<img src="https://roxasking.github.io/post-images/1624359712910.png" alt="" loading="lazy"></p>
<hr>
<h3 id="cluster-node-edge颜色-color">&gt;&gt; cluster、node、edge颜色 <strong>color</strong></h3>
<p>通过属性color，可以给 cluster、node、edge着色，和bgcolor一样有多种指定方式<br>
<img src="https://roxasking.github.io/post-images/1625631750977.png" alt="" loading="lazy"><br>
cluster和node默认着色的是边框，如果全局属性 <strong>style</strong> 设置为 <strong>filled</strong> 时，则会填充整体，效果区别非常明显<br>
<img src="https://roxasking.github.io/post-images/1625664301229.png" alt="" loading="lazy"><br>
这里不得不提一下，针对cluster，设置 style=&quot;filled&quot; 和 color 后，和bgcolor有类似的填充效果，但是区别依然非常明显！bgcolor并不会对边框进行着色，而且bgcolor会被 style=&quot;filled&quot; 的 color 覆盖掉！<br>
<img src="https://roxasking.github.io/post-images/1625664956066.svg" alt="" loading="lazy"></p>
<pre><code>// 源码
digraph {
	bgcolor=&quot;yellow&quot;
	subgraph cluster_a {
		node [style=&quot;filled&quot;]
		style = &quot;filled&quot;
		color = &quot;red&quot;
		A [color = &quot;blue&quot;]
		B [color = &quot;pink&quot;]
	}
	subgraph cluster_b {
		node [style=&quot;filled&quot;]
		bgcolor = &quot;red&quot;
		C [color = &quot;blue&quot;]
		D [color = &quot;pink&quot;]
	}
	subgraph cluster_c {
		bgcolor = &quot;red&quot;
		style = &quot;filled&quot;
		color = &quot;green&quot;
		node [style=&quot;filled&quot;]
		E [color = &quot;blue&quot;]
		F [color = &quot;pink&quot;]
	}
}
</code></pre>
<hr>
<h3 id="字体名-fontname">&gt;&gt; 字体名 <strong>fontname</strong></h3>
<p><strong>注意！</strong> 标签带有中文字体时，必须要指定中文字体！若不指定中文字体，导出图片时字体会乱码！<br>
<img src="https://roxasking.github.io/post-images/1625737306953.png" alt="" loading="lazy"><br>
这里是给graph的label指定字体，若要给 node、edge、cluster指定，可以用全局属性，也可以单独设置<br>
<img src="https://roxasking.github.io/post-images/1625737533734.png" alt="" loading="lazy"></p>
<hr>
<h3 id="字体颜色-fontcolor">&gt;&gt; 字体颜色 <strong>fontcolor</strong></h3>
<p>可以为 graph、cluster、edge、node 设置字体颜色，默认为黑色，支持全局属性<br>
<img src="https://roxasking.github.io/post-images/1625666075176.png" alt="" loading="lazy"></p>
<hr>
<h3 id="node高度-height">&gt;&gt; node高度 <strong>height</strong></h3>
<p>若未给node设置规则形状时，node的高度是根据标签内容动态增长的，但也可以通过 <strong>height</strong> 属性修改。不过若 <strong>height</strong> 值小于容纳标签字体的最小空间时，node高度并不会依据设置的值，而是取能容纳标签字体的最小值(标签非空时，默认取0.5)<br>
<img src="https://roxasking.github.io/post-images/1625729641974.svg" alt="" loading="lazy"></p>
<pre><code class="language-dot">strict digraph {
	&quot;1\n2\n3\n4\n5\n6&quot;
  	&quot;&quot; [height=0.25]
  	&quot;0.25&quot; [height=0.25]
  	&quot;default&quot;
  	&quot;0.5&quot; [height=0.5]
  	&quot;1in&quot; [height=1]
  	&quot;2in&quot; [height=2]
}
</code></pre>
<hr>
<h3 id="node宽度-width">&gt;&gt; node宽度 <strong>width</strong></h3>
<p>若未给node设置规则形状时，node的宽度也是和 <strong>height</strong> 一样，根据标签内容动态扩展，我们依然可以通过 <strong>width</strong> 属性修改。不过若 <strong>width</strong> 值小于容纳标签字体的最小空间时，node宽度并不会依据设置的值，而是取能容纳标签字体的最小值(标签非空时，默认取0.75)<br>
<img src="https://roxasking.github.io/post-images/1625730030105.svg" alt="" loading="lazy"></p>
<pre><code class="language-dot">strict digraph {
  &quot;123456789&quot;
  &quot;d&quot; # default
  &quot;0.25&quot; [width=0.25]
  &quot;0.5&quot; [width=0.5]
  &quot;1&quot; [width=1]
  &quot;2&quot; [width=2]
}
</code></pre>
<hr>
<h3 id="node形状-shape">&gt;&gt; node形状 <strong>shape</strong></h3>
<p>为 node 指定形状，默认是椭圆(ellipse)，可设置的所有形状列表参见 <a href="https://graphviz.org/doc/info/shapes.html">官网链接</a><br>
<img src="https://roxasking.github.io/post-images/1625732167469.png" alt="" loading="lazy"></p>
<hr>
<h3 id="edge方向-dir-有向图digraph专属">&gt;&gt; edge方向 <strong>dir</strong> (有向图digraph专属)</h3>
<p>可以设置箭头的方向， forward(向前，默认)、back(向后)、both(双向)、none(无，效果类似无向图grapth)<br>
<img src="https://roxasking.github.io/post-images/1625642805056.png" alt="" loading="lazy"></p>
<hr>
<h3 id="edge头部和尾部箭头的形状-arrowhead-arrowtail-有向图digraph专属">&gt;&gt; edge头部和尾部箭头的形状 <strong>arrowhead</strong>、<strong>arrowtail</strong> (有向图digraph专属)</h3>
<p>可以指定箭头的形状<br>
<img src="https://roxasking.github.io/post-images/1625642358517.png" alt="" loading="lazy"><br>
需要注意的是，<strong>arrowtail</strong> 属性必须在 dir 属性为 back 或 both 时，才会生效<br>
<img src="https://roxasking.github.io/post-images/1625643055172.png" alt="" loading="lazy"></p>
<hr>
<h3 id="edge头部和尾部箭头的大小-arrowsize-有向图digraph专属">&gt;&gt; edge头部和尾部箭头的大小 **arrowsize&quot; (有向图digraph专属)</h3>
<p>可以设置 <strong>arrowhead</strong> 和 <strong>arrowtail</strong> 的大小，默认大小为 1<br>
<img src="https://roxasking.github.io/post-images/1625643572819.png" alt="" loading="lazy"></p>
<hr>
<h3 id="edge权重-weight">&gt;&gt; edge权重 <strong>weight</strong></h3>
<p>默认值为1，越大，相应的边会越短<br>
<img src="https://roxasking.github.io/post-images/1625732449932.png" alt="" loading="lazy"></p>
<hr>
<h3 id="来个总结">&gt;&gt; 来个总结</h3>
<p>可自定义的属性远远不止这些，这里 <a href="https://graphviz.org/doc/info/attrs.html">官网链接</a> 涵盖了所有可自定义的属性，不过个人认为常用的属性上面已经覆盖很多了，想更深入学习的话，可以自行尝试更多属性。<br>
<img src="https://roxasking.github.io/post-images/1625736950310.png" alt="" loading="lazy"></p>
<pre><code class="language-dot">// OSI七层模型源码
digraph {
	fontname=&quot;Sarasa Gothic Sc&quot;
	label = &quot;OSI七层模型&quot;
	node[shape=&quot;box&quot; height=0.25 width=1.5 fontname=&quot;Sarasa Gothic Sc&quot;]
	&quot;物理层(网络硬件)&quot; [width=3.4]
	&quot;应用层(a)&quot; -&gt; &quot;表示层(a)&quot;
	&quot;表示层(a)&quot; -&gt; &quot;会话层(a)&quot;
	&quot;会话层(a)&quot; -&gt; &quot;传输层(a)&quot;
	&quot;传输层(a)&quot; -&gt; &quot;网络层(a)&quot;
	&quot;网络层(a)&quot; -&gt; &quot;数据链路层(a)&quot;
	&quot;数据链路层(a)&quot; -&gt; &quot;物理层(网络硬件)&quot;
	&quot;应用层(b)&quot; -&gt; &quot;表示层(b)&quot; [dir=&quot;back&quot;]
	&quot;表示层(b)&quot; -&gt; &quot;会话层(b)&quot; [dir=&quot;back&quot;]
	&quot;会话层(b)&quot; -&gt; &quot;传输层(b)&quot; [dir=&quot;back&quot;]
	&quot;传输层(b)&quot; -&gt; &quot;网络层(b)&quot; [dir=&quot;back&quot;]
	&quot;网络层(b)&quot; -&gt; &quot;数据链路层(b)&quot; [dir=&quot;back&quot;]
	&quot;数据链路层(b)&quot; -&gt; &quot;物理层(网络硬件)&quot;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用写代码的方式，给技术文章配图！DOT语言入门指引(一)]]></title>
        <id>https://roxasking.github.io/post/yong-xie-dai-ma-de-fang-shi-gei-ji-zhu-wen-zhang-pei-tu-dot-yu-yan-xue-xi-zhi-nan_1/</id>
        <link href="https://roxasking.github.io/post/yong-xie-dai-ma-de-fang-shi-gei-ji-zhu-wen-zhang-pei-tu-dot-yu-yan-xue-xi-zhi-nan_1/">
        </link>
        <updated>2021-06-22T02:54:30.000Z</updated>
        <content type="html"><![CDATA[<p>写技术文章难免会遇到需要画配图的时候，比如思维导图、ER图、有限状态机等，相应的画图工具也不少。但是并非所有人都习惯用鼠标作图，更别说一些不错的画图工具还有着不低的学习成本。所以，问题来了，有更适合码农的作图工具么？你可以试试Graphviz DOT语言，用写代码的方式画图！</p>
<hr>
<h2 id="安装graphviz">&gt;&gt;&gt; 安装Graphviz</h2>
<p>如果是Debian系操作系统(Debian、Ubuntu)，使用apt包管理器</p>
<pre><code class="language-sh">$ sudo apt install graphviz
</code></pre>
<p>如果是红帽系的发行版(Redhat、CentOS、Fedora)，则用yum包管理器</p>
<pre><code class="language-sh">$ sudo yum install graphviz
</code></pre>
<p>非Linux发行版的，参见 <a href="https://graphviz.org/download/">官方指导</a></p>
<p>如果安装成功，命令行输入 dot -V，就会打印出当前的版本信息</p>
<pre><code class="language-sh">$ dot -V
dot - graphviz version 2.43.0 (0)
</code></pre>
<h2 id="hello-world">&gt;&gt;&gt; Hello world!</h2>
<p>让我们先写出第一段代码吧</p>
<pre><code class="language-sh">echo 'digraph { Hello -&gt; world }' | dot -Tsvg &gt; output.svg
</code></pre>
<p><img src="https://roxasking.github.io/post-images/1624330867289.png" alt="" loading="lazy"><br>
很好！dot命令行通过解析 'digraph { Hello -&gt; world }' 生成svg格式图像，并保存在指定文件中。我们通过dot语言描述对象间的关系，即可生成我们想要的关系图，是不是很nice🎉</p>
<hr>
<h2 id="dot命令行">&gt;&gt;&gt; DOT命令行</h2>
<p>dot命令行的使用格式如下</p>
<pre><code class="language-sh">dot [-(GNE)name=val] [-(KTlso)&lt;val&gt;] &lt;dot files&gt;
</code></pre>
<h3 id="-gname-value">-<strong>G</strong><em>name</em> [=<em>value</em>]</h3>
<p>用于设置图片属性，比如给图片添加标签、标签字体颜色等，如下命令会给图标注红色字体的名字</p>
<pre><code class="language-sh">echo 'digraph { Hello -&gt; world }' | \
dot -Tsvg -Gfontcolor=red -Glabel=&quot;red font label&quot; &gt; output.svg
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://roxasking.github.io/post-images/1624333298957.png" alt="" loading="lazy"></figure>
<h3 id="-nnamevalue">-<strong>N</strong><em>name</em>[=<em>value</em>]</h3>
<p>用于设置节点的属性，比如设置节点的形状、节点字体颜色等，如下命令会将节点设置为圆形，节点内的文字变为蓝色</p>
<pre><code class="language-sh">echo 'digraph { Hello -&gt; world }' | \
dot -Tsvg -Nfontcolor=blue -Nshape=circle &gt; output.svg
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://roxasking.github.io/post-images/1624333949153.png" alt="" loading="lazy"></figure>
<h3 id="-enamevalue">-<strong>E</strong><em>name</em>[=<em>value</em>]</h3>
<p>用于给节点之间的箭头设置属性，比如箭头颜色，箭头形状等，如下命令会将箭头设置为红色和无形状</p>
<pre><code class="language-sh">echo 'digraph { Hello -&gt; world }' |  \
dot -Tsvg -Ecolor=red -Earrowhead=none &gt; output.svg
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://roxasking.github.io/post-images/1624334898437.png" alt="" loading="lazy"></figure>
<h3 id="-klayout">-<strong>K</strong><em>layout</em></h3>
<p>用于指定默认的布局引擎，覆盖命令行的默认值，比如用sfdp代替默认的dot，目前先pass~</p>
<pre><code class="language-sh">echo 'digraph { Hello -&gt; world }' |  \
dot -Tsvg -Ksfdp &gt; output.svg
</code></pre>
<h3 id="-tformatrendererformatter">-<strong>T</strong><em>format</em>[:<em>renderer</em>[:<em>formatter</em>]]</h3>
<p>用于指定输出的格式，默认为dot格式，但我们可以指定为其它，比如png、jpg、bmp等，后面加 : 还能指定渲染器以及格式，功能极为强大，官网也罗列了所有 <a href="https://graphviz.org/docs/outputs/">支持的格式</a>，各位可自行尝试</p>
<h3 id="-llibrary">-<strong>l</strong><em>library</em></h3>
<p>用于指定用户提供的依赖于设备的库文本，具体怎么使用目前先pass~</p>
<h3 id="-nnum">-<strong>n</strong>[<em>num</em>]</h3>
<p>当布局引擎指定为neato，且所有节点都设置了位置属性时可用，可以用于消除节点之间的重叠，具体怎么使用目前先pass~</p>
<h3 id="-ooutfile">-<strong>o</strong><em>outfile</em></h3>
<p>用于指定输出文件，不加的话默认是标准输出，比如如下命令输出到helloworld.svg文件中</p>
<pre><code class="language-sh">echo 'digraph { Hello -&gt; world }' |  \
dot -Tsvg -o helloword.svg
# 功能几乎相当于
echo 'digraph { Hello -&gt; world }' |  \
dot -Tsvg &gt; helloword.svg
</code></pre>
<h3 id="-o">-<strong>O</strong></h3>
<p>自动的根据指定输出类型输出文件，比如用如下命令</p>
<pre><code class="language-sh">echo 'digraph { Hello -&gt; world }' |  \
dot -Tpng -O
</code></pre>
<p>我们会得到一个名为 noname.gv.png 的输出文件</p>
<h3 id="-p">-<strong>P</strong></h3>
<p>自动生成一个图形，显示当前可执行文件的插件配置，比如用如下命令</p>
<pre><code class="language-sh">dot -P -Tsvg -o plugins.svg
</code></pre>
<p>会生成一个超大的描述图<br>
<img src="https://roxasking.github.io/post-images/1624338931353.svg" alt="" loading="lazy"><br>
额，这也太详细了吧😱</p>
<h3 id="-q">-<strong>q</strong></h3>
<p>忽略警告信息，比如我们给某个节点指定个不存在的形状，不加 -q 时会输出如下警告</p>
<pre><code class="language-sh">$ echo 'digraph { Hello -&gt; world }' | \
dot -Tsvg -Nfontcolor=blue -Nshape=hahaha &gt; output.svg
Warning: using box for unknown shape hahaha
</code></pre>
<p>而加了 -q 标签时会如下</p>
<pre><code class="language-sh">$ echo 'digraph { Hello -&gt; world }' | \
dot -Tsvg -Nfontcolor=blue -Nshape=hahaha &gt; output.svg
</code></pre>
<h3 id="-sscale">-<strong>s</strong>[<em>scale</em>]</h3>
<p>当布局引擎指定为neato或fdp时会用上，默认为72，具体怎么使用目前暂时pass~</p>
<h3 id="-x">-<strong>x</strong></h3>
<p>依然是neato引擎专属，目前先pass~</p>
<h3 id="-y">-<strong>y</strong></h3>
<p>用于输出时反转y坐标轴，即将默认使用的标准笛卡尔坐标系(原点位于左下角，y轴自下而上递增)的y轴，变为自上而下递增。</p>
<hr>
<h2 id="编辑器">&gt;&gt;&gt; 编辑器</h2>
<p>工欲善其事，必先利其器！直接使用命令行编辑确实可以，但是好的工具可以让我们事半功倍</p>
<p>你可以选择使用官方提供的在线可视化编辑器 <a href="http://magjac.com/graphviz-visual-editor/">Graphviz Visual Editor</a></p>
<p>或者使用VSCode + Graphviz (dot) language support for Visual Studio Code 扩展，使用效果如下<br>
<img src="https://roxasking.github.io/post-images/1624348059658.png" alt="" loading="lazy"><br>
右边的预览，输入F2，然后搜索 graphviz，选 Open Preview to the Side 即可打卡</p>
<hr>
<h2 id="dot语法基础">&gt;&gt;&gt; DOT语法基础</h2>
<h3 id="关键字大小写无关">&gt;&gt; 关键字大小写无关</h3>
<p>关键字 <strong>node</strong>, <strong>edge</strong>, <strong>graph</strong>, <strong>digraph</strong>, <strong>subgraph</strong>, <strong>strict</strong>无所谓大小写，比如这样</p>
<pre><code class="language-dot">digraph {
	node [label=&quot;\N&quot;]
	edge [arrowhead=&quot;none&quot;]
	Hello -&gt; world
}
</code></pre>
<p>或者这样</p>
<pre><code class="language-dot">Digraph {
	Node [label=&quot;\N&quot;]
	Edge [arrowhead=&quot;none&quot;]
	Hello -&gt; world
}
</code></pre>
<p>均不影响图像的生成，但是个人还是强烈建议使用小写，因为大写的话VSCode就没语法高亮了<br>
<img src="https://roxasking.github.io/post-images/1624349045586.png" alt="" loading="lazy"></p>
<h3 id="有向图无向图">&gt;&gt; 有向图&amp;无向图</h3>
<p><strong>digraph</strong> 是有向图的声明， <strong>graph</strong> 是无向图的声明</p>
<p>使用 <strong>digraph</strong> 声明时，节点之间用 <strong>-&gt;</strong> 连接</p>
<pre><code class="language-dot">digraph {
	2 -&gt; 1 [color = red]
	2 -&gt; 3 [color = blue]
}
</code></pre>
<p>使用 <strong>graph</strong> 声明时，节点之间用 <strong>--</strong> 连接</p>
<pre><code class="language-dot">graph {
	2 -- 1 [color = red]
	2 -- 3 [color = blue]
}
</code></pre>
<p>digraph(或graph)前面可以加 <strong>strict</strong> 关键字，而效果对比则非常直观<br>
<img src="https://roxasking.github.io/post-images/1624353109248.png" alt="" loading="lazy"><br>
<img src="https://roxasking.github.io/post-images/1624353117682.png" alt="" loading="lazy"></p>
<p>使用 <strong>strict</strong> 关键字后，一条边声明大于1次时，最终效果依然只有1条，且生效的会是那条边的最后一次声明，比如如下代码，生效的是蓝色边<br>
<img src="https://roxasking.github.io/post-images/1624353398424.png" alt="" loading="lazy"></p>
<p>值得一提的是，有向图 <strong>digraph</strong> 两节点之间可以创建两条不同方向的边，而 无向图 <strong>graph</strong> 则只能创建一条<br>
<img src="https://roxasking.github.io/post-images/1624353992331.png" alt="" loading="lazy"><br>
<img src="https://roxasking.github.io/post-images/1624354000421.png" alt="" loading="lazy"></p>
<h3 id="子图簇">&gt;&gt; 子图&amp;簇</h3>
<p>我们可以用 <strong>subgraph</strong> {} 来声明一个子图<br>
<img src="https://roxasking.github.io/post-images/1624355532574.png" alt="" loading="lazy"><br>
或者可以简写，忽略关键字，用 {} 即可，效果一致<br>
<img src="https://roxasking.github.io/post-images/1624355829844.png" alt="" loading="lazy"><br>
这等价于如下语句<br>
<img src="https://roxasking.github.io/post-images/1624356017066.png" alt="" loading="lazy"><br>
使用 <strong>subgraph</strong> 可以用于减少代码量，结构化声明<br>
<img src="https://roxasking.github.io/post-images/1624357375682.png" alt="" loading="lazy"></p>
<p>若声明子图时，给子图名字加上 <strong>cluster_</strong> 前缀，即簇， 则可以独立声明一些属性，比如<br>
<img src="https://roxasking.github.io/post-images/1624358779259.png" alt="" loading="lazy"><br>
可以覆盖主图的设定。使用 <strong>cluster_</strong> 前缀的时候，<strong>subgraph</strong> 不能省略！</p>
<hr>
<p>下一篇我将介绍DOT常用属性</p>
]]></content>
    </entry>
</feed>